# -*- coding: utf-8 -*-
"""Train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O9jfAShxpFHqkYafHe6GE0EMOhAcvcrW

##1. Understand the Problem
The problem is to optimize inventory management by predicting sales based on features such as date and stock level. The prediction helps businesses determine when and how much to restock.

###Step-by-Step Explanation of Restocking Recommendation:
1. Model's Role:
The model predicts future sales based on the input features (Year, Month, Day, and inventory_level). So, when the user inputs these details through the form, the trained model predicts the sales quantity for that given day.

2. The Logic for Restocking:
The restocking quantity can be derived by considering the predicted sales and comparing it to the current stock level.

If the current stock level is lower than the predicted sales, the system will recommend restocking.
If the stock level is higher than the predicted sales, no restocking is necessary.
"""

#import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import pickle

df = pd.read_csv('encoded_data.csv')

df.head()

df['date'] = pd.to_datetime(df['date'])
df['sales'] = df['sales'].astype(int)
print(df.dtypes)

# Features and target (add encoded product names)
X = df[['Year', 'Month', 'Day', 'stock_level'] + [col for col in df.columns if 'product_name_' in col]]
y = df['sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""Save the trained model to a file (model.pkl) using the pickle library.
This allows the model to be reused without retraining every time. You can load the saved model in a Flask application (or elsewhere) for making predictions.
"""

# Save the model
model_path = '/content/model.pkl'
with open(model_path, 'wb') as file:
    pickle.dump(model, file)

print(f'Model saved to {model_path}')

